.TH SNMPD 8 "January 31, 1990"
.SH NAME
snmpd - SNMP server for UNIX gateways and hosts
.SH SYNOPSIS
.B snmpd [-d debuglevel logfile]
.SH DESCRIPTION
.LP
.I snmpd 
is a server which performs SNMP operations on a UNIX gateway or host.
.I snmpd
sits in the background and listens on SNMP port 161.
An entry in the service file "/etc/services" must be made for
.I snmpd
to start up properly.  When an SNMP packet is received by
.I snmpd
from a Network Operations Center (NOC),
.I snmpd
performs SNMP operations on the packet as specified in RFC 1098 and returns
a valid response to the NOC.
.I snmpd
extracts much of its information from kernel memory.
Certain variables can also be retrieved via various UNIX daemons.
Static variables whose values are not available in the kernel take values from
a configuration file.  The configuration file is
usually
.I /etc/snmpd.conf,
but can be changed at compile time.
.I snmpd
conforms to
RFC 1098 (Simple Network Management Protocol) and provides management
variables specified in RFC 1066 (Management Information Base).
.SH COMMAND LINE ARGUMENTS
.I snmpd
logs all of its error messages via syslog, but certain debugging and
trace information can be obtained by setting the appropriate debug level
on the command line during start up.  You can do this by specifying the -d
flag followed by a <debuglevel> and a <logfile>.  The maximum debug
level is 9.  The debug output will be written to <logfile>.  The current
debug levels are:
.in +5
.IP 1
Print version number, start time, and exit time of
.I snmpd.
Also print out when an SNMP packet is received, the address of the sender,
and the size of the packet in bytes.
.IP 2
Print out what has been read from the configuration file.
.IP 3
Dump the SNMP packet that we have just received and are about to process.
Also print out the route
or interface address we are currently trying to look up.
This level also dumps the SNMP packet that the server is sending
back in response to a received SNMP message.
.IP 4
Dump the
.I snmpd
variable tree.  Also, print out the static bootstrap array of tree
information.
.in -5
.LP
When a debug level is set, the debug output includes the information which
can be gathered from all of the debug levels below the debug level you
specify.  If no debug levels are turned on,
.I snmpd
will detach itself from the controlling terminal and go into the background.
A log file must be specified when debugging is used.
.SH CONFIGURATION FILE PARAMETERS
.LP
sysdescr <ID string>
.LP
When specified, the <ID string> is given as the value of the
_mgmt_mib_system_sysDescr variable.
If this is not specified in the configuration
file, the default value is used.  The default value can be set at
compile time in the source file "config.h".
.LP
interface speed <name> <speed>
.LP
Describes a value for the MIB variable defined
as _mgmt_mib_interfaces_ifTable_ifEntry_ifSpeed.
<name> must be
a UNIX interface name like "ie0" or "de1".  <speed> is a decimal number
describing the speed of the link in bits per second.  If this is not
specified,
.I snmpd
will not return this variable and will mark it as not available.
.LP
interface type <name> <type>
.LP
Describes a value for the MIB variable in the interface table defined
as _mgmt_mib_interfaces_ifTable_ifEntry_ifType.
<name> must be a UNIX interface name like "ie0" or "de1".
<type> is a decimal number
which describes the type of the interface.  The appropriate type number
for the interface can be found in the MIB RFC 1066, page 13.  If this is not
specified,
.I snmpd
will not return this variable and will mark it as not available.
.LP
tcprtoalgorithm <algorithm type>
.LP
Describes a value for the MIB variable in the TCP group defined
as _mgmt_mib_tcp_tcpRtoAlgorithm.
This variable defines the Retransmission Time-Out Algorithm your machine
is using.  <algorithm type> is a numeric code which represents the type
of RTO algorithm you are using.  The code numbers can be found in RFC 1066,
on page 52.
If this is not specified,
.I snmpd
will not return this variable and will mark it as not available.
.LP
community <name> <address> {read-only | read-write | traps}
.LP
This describes a SNMP community for the server.  <name> is a string describing
the name of the community.  <address> is an internet address in dot notation.
Only SNMP packets coming from <address> will be accepted.  If 0.0.0.0 is
specified in the <address> field, any address can use the community.  The
last parameter on the line indicates flags describing the community type.
Three types
of communities are supported.  "read-only" means that this community will
only permit the monitoring of variables.  "read-write" means that this
community will permit monitoring and setting of variables.
"traps" means that this community will generate traps when it is appropriate and
send them to the specified address with the specified community name.
If no SNMP communities are specified, then
.I snmpd
will not respond to any SNMP packets.  Illegal uses of communities are
logged via syslog.  To limit the use of a community to a finite group of
machines, but still more than one machine, you may specify another community
clause with the same community <name> and different address.
.in +5
.sp
Examples of describing communities:
.sp
community bignoc	192.33.4.44	read-only
.br
community bignoc	192.33.4.10	read-only
.br
community public	0.0.0.0		read-only
.br
community mytest	128.84.253.200	read-only
.br
community trap1	192.33.4.44	traps
.br
community trap1	192.33.4.10	traps
.br
community trap2	10.4.0.15		traps
.br
.in -5
.LP
In the examples above, community "bignoc" can be used by either 192.33.4.44 or
192.33.4.10.  Session "public" can be used by anyone, and community "mytest"
can only be used by 128.84.253.200.  All of the communities above do not
permit the setting of variables as the read-only flag is set.
.LP
When a trap is generated, it is sent to 192.33.4.44 and 192.33.4.10 with
community name "trap1".  A trap is also sent to 10.4.0.15 with community
name "trap2".  It is assumed that these destination addresses have
a trap catcher to handle the traps.  See snmptrapd(1).
.SH SNMP TRAP SUPPORT
.LP
SNMP traps are supported by
.I snmpd.
Three trap types are currently supported.
The "Cold Start" trap type is generated by
.I snmpd
when
.I snmpd
is restarted.
The "Authentication Failure" trap type is generated when an attempt at
using a community fails.  This happens when an unauthorized client tries
to use
.I snmpd
or the community is used in a way that the community type does not allow.
Traps are sent to all communities specified in the configuration file with
a community type of "traps".
.LP
no_authen_traps
.LP
When this clause is specified in the configuration file, traps
of type "Authentication Failure" will not be generated.  The default
is for
.I snmpd
to generate Authentication Failure traps.
.LP
The standard Athena agent has support to send a trap upon a login
or logout to facilitate the Athena cluster monitoring service. The
community name for these traps is "mit-traps".
.SH SNMP SETS
The mechanism for the setting of management variables as specified in
RFC 1098 has been added to
.I snmpd.
When
.I snmpd
receives a set-request packet, it processes the variables in the packet and
verifies that they are valid read-write variables.  While performing this
verification,
.I snmpd
constructs a linked list of the set requests.  When the verification is
done, the actual set operations are performed on the variables "as if they
were performed simultaneously".  If any actual set operation should fail,
all previously set variables from the set-request packet are restored to
their old values.  Details of the set-request processing can be found in
RFC 1098.
.SH SNMP VARIABLES SUPPORTED
.LP
.I snmpd
supports the variables
in the MIB RFC 1066.
Currently,
.I snmpd
supports approximately 82% of the MIB variables defined.  UNIX kernel
mods will be needed to bring this percentage up to 100%.  The kernel mods
needed have not been made and are not available at this time.
Certain variables in the MIB are not kept in the UNIX kernel, but stored
in application level system programs.  An example of this is the routing
daemon on a UNIX gateway.
.I Snmpd
has been modified to extract information from UNIX daemons.  Currently,
only support for this data retrieval has been added to the
.I gated
routing daemon.  Because of this,
.I snmpd
can now retrieve information about the EGP group and ipRoutingTable variables
of the MIB.  Modifications to the
.I gated
distribution are included in the SNMP distribution server directory.
.PP
.I Snmpd
has been modified at MIT to extract information from Project Athena
workstations and various services such as NFS, Mail, Weather, etc. 
.LP
.SH BUGS
.LP
Not all of the MIB variables are supported because the UNIX kernel does
not provide them.
.LP
Currently, only one variable is
settable: _mgmt_mib_interfaces_ifTable_ifEntry_ifAdminStatus.
Look for a refinement of the set processing and
support for more settable variables in future releases.
.SH FILES
.in +5
/etc/snmpd.conf		The configuration file
.br
/etc/snmpd.pid			The process id of snmpd
.br
/mit/snmp/nyser		Location of clients and MIB.
.in -5
.SH SEE ALSO
"Simple Network Management Protocol", RFC 1098, by
J.D. Case,
M.S. Fedor,
M.L. Schoffstall and
J.R. Davin;
"SNMP Implementation 3.4", by
C.P. Kolb,
M.L. Schoffstall,
W. Yeong,
M.S. Fedor;
"Management Information Base for Network Management of TCP/IP Based Internets",
RFC 1066, by
M. Rose and
K. McCloghrie; and
"Structure and Identification of Management Information
for TCP/IP Based Internets", RFC 1065, by
M. Rose and
K. McCloghrie.
